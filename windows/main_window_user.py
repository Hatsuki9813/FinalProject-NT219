# Form implementation generated from reading ui file 'UserUI.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is# run again.  Do not edit this file unless you know what you are doing.

from PyQt6.QtWidgets import QListWidgetItem
from PyQt6.QtGui import QPixmap, QIcon
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QSize
from chacha20 import logistic_map_key, decrypt_video
import pymysql
import requests
import os
import cv2
class Ui_UserForm(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(776, 589)
        self.gridLayout_3 = QtWidgets.QGridLayout(Form)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.MainBody = QtWidgets.QWidget(parent=Form)
        self.MainBody.setStyleSheet("")
        self.MainBody.setObjectName("MainBody")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.MainBody)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.Searchframe = QtWidgets.QFrame(parent=self.MainBody)
        self.Searchframe.setStyleSheet("#Searchframe{\n"
"border: 1px solid #aa7e6f;\n"
"border-radius:5px;\n"
"background-color: white;\n"
"}\n"
"QLineEdit { qproperty-frame: false }\n"
"\n"
"#Searchframe QPushButton{\n"
"padding: 5px 5px;\n"
"border-radius:15px;\n"
"}\n"
"#Searchframe QPushButton:pressed{padding-left:10px}\n"
"\n"
"")
        
        self.Searchframe.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.Searchframe.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.Searchframe.setObjectName("Searchframe")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.Searchframe)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(10)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.SearchLine = QtWidgets.QLineEdit(parent=self.Searchframe)
        self.SearchLine.setStyleSheet("")
        self.SearchLine.setText("")
        self.SearchLine.setObjectName("SearchLine")
        self.horizontalLayout.addWidget(self.SearchLine)
        self.pushButton_5 = QtWidgets.QPushButton(parent=self.Searchframe)
        self.pushButton_5.setMinimumSize(QtCore.QSize(25, 25))
        self.pushButton_5.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/icons/search (1).png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pushButton_5.setIcon(icon)
        self.pushButton_5.setIconSize(QtCore.QSize(25, 25))
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayout.addWidget(self.pushButton_5)
        self.verticalLayout_7.addWidget(self.Searchframe)
        self.listWidget_3 = QtWidgets.QListWidget(parent=self.MainBody)
        self.listWidget_3.setObjectName("listWidget_3")
        #Nhan vao list
        self.listWidget_3.itemClicked.connect(self.clicklist)
        self.verticalLayout_7.addWidget(self.listWidget_3)
        self.horizontalLayout_2.addWidget(self.MainBody)
        self.gridLayout_2.addLayout(self.horizontalLayout_2, 0, 1, 1, 1)
        self.MenuWidget_2 = QtWidgets.QWidget(parent=Form)
        self.MenuWidget_2.setStyleSheet("background-color: #13131d;\n"
"border:none;\n"
"color:white;")
        self.MenuWidget_2.setObjectName("MenuWidget_2")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.MenuWidget_2)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.LableTenApp_5 = QtWidgets.QLabel(parent=self.MenuWidget_2)
        font = QtGui.QFont()
        font.setFamily("Open Sans ExtraBold")
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.LableTenApp_5.setFont(font)
        self.LableTenApp_5.setStyleSheet("color:red;")
        self.LableTenApp_5.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.LableTenApp_5.setObjectName("LableTenApp_5")
        self.verticalLayout_8.addWidget(self.LableTenApp_5)
        self.toolBox = QtWidgets.QToolBox(parent=self.MenuWidget_2)
        self.toolBox.setStyleSheet("#toolBox{\n"
"color:whitel;\n"
"}\n"
"#toolBox::tab{\n"
"padding-left:5px;\n"
"text-align:left;\n"
"border-radius:2px;\n"
"}\n"
"#toolBox::tab:selected{\n"
"background-color:#2d9cdb;\n"
"font-weight:bold;\n"
"}\n"
"#toolBox QPushButton\n"
"{\n"
"padding:5px 0px 5px 20px;\n"
"text-align:left;\n"
"border-radius:3px;\n"
"}\n"
"#toolBox QPushButton:hover{\n"
"background-color:#85C1E9;\n"
"}\n"
"#toolBox QPushButton:checked{\n"
"background-color:#4398D8;\n"
"}")
        self.toolBox.setObjectName("toolBox")
        self.page_9 = QtWidgets.QWidget()
        self.page_9.setGeometry(QtCore.QRect(0, 0, 215, 449))
        self.page_9.setObjectName("page_9")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.page_9)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.HomeButton = QtWidgets.QPushButton(parent=self.page_9)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.HomeButton.setFont(font)
        self.HomeButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.HomeButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.HomeButton.setIconSize(QtCore.QSize(32, 32))
        self.HomeButton.setCheckable(True)
        self.HomeButton.setAutoExclusive(False)
        self.HomeButton.setObjectName("HomeButton")
        self.verticalLayout_9.addWidget(self.HomeButton)
        self.MyListButton = QtWidgets.QPushButton(parent=self.page_9)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.MyListButton.setFont(font)
        self.MyListButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.MyListButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.MyListButton.setIconSize(QtCore.QSize(32, 32))
        self.MyListButton.setCheckable(True)
        self.MyListButton.setObjectName("MyListButton")
        self.verticalLayout_9.addWidget(self.MyListButton)
        self.RAbutton = QtWidgets.QPushButton(parent=self.page_9)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.RAbutton.setFont(font)
        self.RAbutton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.RAbutton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.RAbutton.setIconSize(QtCore.QSize(32, 32))
        self.RAbutton.setCheckable(True)
        self.RAbutton.setObjectName("RAbutton")
        self.verticalLayout_9.addWidget(self.RAbutton)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_9.addItem(spacerItem)
        self.toolBox.addItem(self.page_9, "")
        self.page_10 = QtWidgets.QWidget()
        self.page_10.setGeometry(QtCore.QRect(0, 0, 215, 449))
        self.page_10.setObjectName("page_10")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.page_10)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.UserButton = QtWidgets.QPushButton(parent=self.page_10)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.UserButton.setFont(font)
        self.UserButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/icons/user (1).png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.UserButton.setIcon(icon1)
        self.UserButton.setIconSize(QtCore.QSize(32, 32))
        self.UserButton.setCheckable(True)
        self.UserButton.setAutoExclusive(False)
        self.UserButton.setObjectName("UserButton")
        self.verticalLayout_10.addWidget(self.UserButton)
        self.AboutButton = QtWidgets.QPushButton(parent=self.page_10)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.AboutButton.setFont(font)
        self.AboutButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.AboutButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/icons/settings.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.AboutButton.setIcon(icon2)
        self.AboutButton.setIconSize(QtCore.QSize(32, 32))
        self.AboutButton.setCheckable(True)
        self.AboutButton.setAutoExclusive(False)
        self.AboutButton.setObjectName("AboutButton")
        self.verticalLayout_10.addWidget(self.AboutButton)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_10.addItem(spacerItem1)
        self.toolBox.addItem(self.page_10, "")
        self.verticalLayout_8.addWidget(self.toolBox)
        self.gridLayout_2.addWidget(self.MenuWidget_2, 0, 0, 1, 1)
        self.gridLayout_2.setColumnStretch(0, 45)
        self.gridLayout_2.setColumnStretch(1, 100)
        self.gridLayout_3.addLayout(self.gridLayout_2, 0, 0, 1, 1)
        self.retranslateUi(Form)
        self.toolBox.setCurrentIndex(1)
        self.toolBox.layout().setSpacing(6)
        QtCore.QMetaObject.connectSlotsByName(Form)
        self.load_movies()



    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.SearchLine.setPlaceholderText(_translate("Form", "Search something..."))
        self.LableTenApp_5.setText(_translate("Form", "UitFlix"))
        self.HomeButton.setText(_translate("Form", "Home"))
        self.MyListButton.setText(_translate("Form", "My List"))
        self.RAbutton.setText(_translate("Form", "Recently Added"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.page_9), _translate("Form", "General"))
        self.UserButton.setText(_translate("Form", "User"))
        self.AboutButton.setText(_translate("Form", "About"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.page_10), _translate("Form", "Setting"))
    def load_movies(self):
        connection = pymysql.connect(host='192.168.240.26', user='nguoidung', password='9813', db='appdb', port=3306 ,cursorclass=pymysql.cursors.DictCursor)
        with connection.cursor() as cursor:
            sql = "SELECT * FROM video"
            cursor.execute(sql)
            result = cursor.fetchall()
            for row in result:
                image_blob = row['thumbnail']
                video_path = row['link']
                video_name = row['videoname']
                iconpath = 'content'
                icon = os.path.join(iconpath, f"{video_name}icon.jpg")
                print(os.path.abspath((icon)))
                with open(icon, "wb") as file:
                    file.write(image_blob)
                item = QListWidgetItem()
                self.listWidget_3.addItem(item)
                item.setIcon((QIcon(QPixmap(icon))))
                self.listWidget_3.setIconSize(QSize(90, 90))
                item.setText(video_name)  # Không hiển thị văn bản
                item.setData(QtCore.Qt.ItemDataRole.UserRole, video_name)  
        
    def clicklist(self, item):
        save_directory = "content"
        if not os.path.exists(save_directory):
            os.makedirs(save_directory)

        video_name = item.data(QtCore.Qt.ItemDataRole.UserRole)
        file_path = os.path.join(save_directory, f"{video_name}.bin")
        if video_name:
            video_name = video_name.split('/')[-1].split('.')[0]  # Extract the video name without extension
            url =  'https://192.168.240.26:5000/get_video'
            response = requests.post(url, data={'video_name': video_name}, verify=False)
            file_path = os.path.join(save_directory, f"{video_name}.bin")
            if response.status_code == 200:
                with open(file_path, 'wb') as f:
                    f.write(response.content)
                print(f"Downloaded {video_name}.bin successfully.")
            else:
                print(f"Failed to download video: {response.json().get('error')}")
        key = logistic_map_key(32)
        nonce = logistic_map_key(16)
        opath = os.path.join(save_directory, f"{video_name}.mp4")
        print(opath)
        decrypt_video(file_path, opath, key, nonce)
        cap = cv2.VideoCapture(opath) 
        if (cap.isOpened()== False): 
           print("Error opening video file") 
  
# Read until video is completed 
        while(cap.isOpened()): 
      
# Capture frame-by-frame 
            ret, frame = cap.read()  
            if ret == True: 
    # Display the resulting frame 
                cv2.imshow('Frame', frame) 
          
    # Press Q on keyboard to exit 
                if cv2.waitKey(25) & 0xFF == ord('q'): 
                    break
  
# Break the loop 
            else: 
                break
  
# When everything done, release 
# the video capture object 
        cap.release() 
  
# Closes all the frames 
        cv2.destroyAllWindows() 
        os.remove(opath)


    
    '''def load_list(self, items):        
        list_item = QtWidgets.QListWidgetItem("Danh sách")
        self.listWidget_3.addItem(list_item)
        for item in items:
            list_item = QtWidgets.QListWidgetItem(item)
            self.listWidget_3.addItem(list_item)'''

'''if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui =  Ui_UserForm()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec())'''
